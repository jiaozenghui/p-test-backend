import { Next } from "@eggjs/tegg";
import { Context } from "egg";

module.exports = (option) => {
  return async function jwt(ctx: Context, next: Next) {
    //从header 获取对应的token
    const token = getTokenValue(ctx);
    if (!token) {
      ctx.helper.error({ errorType: "loginValidateFail" });
    }

    //判断secret 是否存在
    const { secret } = option;
    if (!secret) {
      throw new Error("Secret not provided");
    }

    try {
      if (typeof token === "string") {
        const decode = await ctx.app.jwt.verify(token, secret);
        ctx.state.user = decode;
        await next();
      }
    } catch (e) {
      const error = e as any;
      if (error && error.status === 401) {
        return ctx.helper.error({ errorType: "loginValidateFail" });
      } else {
        throw e;
      }
    }
  };
};

function getTokenValue(ctx: Context) {
  //JWT Hearder 格式
  //Authorization: Bearer tokenxxx
  const { authorization } = ctx.header;
  if (!ctx.header || !authorization) {
    return false;
  }
  if (typeof authorization === "string") {
    const parts = authorization.trim().split(" ");
    if (parts.length === 2) {
      const scheme = parts[0];
      const credentials = parts[1];
      if (/^Bearer$/i.test(scheme)) {
        return credentials;
      }
    } else {
      return false;
    }
  } else {
    return false;
  }
}
